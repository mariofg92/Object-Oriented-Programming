    /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor. 
 */

/*
 * VentanaPrincipal.java
 *
 * Created on 10-ene-2013, 10:35:51
 */
package modeloNapakalaki;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.LinkedList;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import napakalaki.JD_dado;
import javax.swing.border.*;

   
   
   
    
/**
 *
 * @author rubens
 */
public class VentanaPrincipal extends javax.swing.JFrame implements Vista {
    private JD_dado dado;
    private Napakalaki juego;
    private String[] nombresJugadores;
    private Monstruo monstruoEnJuego;
    private Jugador jugadorActivo;
    private LinkedList<Tesoro>tesorosVisiblesSeleccionados = new LinkedList();
    private LinkedList<Tesoro>tesorosOcultosSeleccionados = new LinkedList();
    private LinkedList<TesoroGrafico>tesorosVisiblesAlimpiar = new LinkedList();
    private LinkedList<TesoroGrafico>tesorosOcultosAlimpiar = new LinkedList();

    /** Creates new form VentanaPrincipal */
    public VentanaPrincipal(Napakalaki unJuego) {
        juego = unJuego;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jP_datosJugador = new javax.swing.JPanel();
        jL_tituoJ = new javax.swing.JLabel();
        jL_nivelJ = new javax.swing.JLabel();
        jL_nombreJ = new javax.swing.JLabel();
        jPanelTesV = new javax.swing.JPanel();
        jPanelTesO = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jL_Secta = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jBComprar = new javax.swing.JButton();
        jBEquipar = new javax.swing.JButton();
        jBDes = new javax.swing.JButton();
        jP_datosMonstruo = new javax.swing.JPanel();
        jL_tituloM = new javax.swing.JLabel();
        jL_Monstruo = new javax.swing.JLabel();
        jBCombatir = new javax.swing.JButton();
        jBSiguiente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(849, 629));

        jP_datosJugador.setBackground(new java.awt.Color(0, 167, 26));
        jP_datosJugador.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jL_tituoJ.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jL_tituoJ.setText("JUGADOR");
        jL_tituoJ.setName("jL_tituoJ"); // NOI18N

        jL_nivelJ.setText("Nivel:");
        jL_nivelJ.setName("jL_nombreMonstruo"); // NOI18N

        jL_nombreJ.setText("Nombre:");
        jL_nombreJ.setName("jL_nombreMonstruo"); // NOI18N

        jPanelTesV.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelTesV.setForeground(new java.awt.Color(238, 238, 238));

        jPanelTesO.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelTesO.setForeground(new java.awt.Color(238, 238, 238));

        jLabel2.setText("Tesoros equipados:");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jLabel3.setText("Tesoros ocultos:");

        jL_Secta.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jL_Secta.setMinimumSize(new java.awt.Dimension(60, 100));
        jL_Secta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                zoomOffSecta(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                zoomOnSecta(evt);
            }
        });

        jLabel1.setText("Carta sectario:");

        jBComprar.setText("Comprar Niveles");
        jBComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBComprarActionPerformed(evt);
            }
        });

        jBEquipar.setLabel("Equipar Tesoro");
        jBEquipar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEquiparActionPerformed(evt);
            }
        });

        jBDes.setLabel("Descartar Tesoros");
        jBDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jP_datosJugadorLayout = new javax.swing.GroupLayout(jP_datosJugador);
        jP_datosJugador.setLayout(jP_datosJugadorLayout);
        jP_datosJugadorLayout.setHorizontalGroup(
            jP_datosJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_datosJugadorLayout.createSequentialGroup()
                .addGroup(jP_datosJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jP_datosJugadorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jP_datosJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelTesO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelTesV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jP_datosJugadorLayout.createSequentialGroup()
                                .addGroup(jP_datosJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jP_datosJugadorLayout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(jP_datosJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jL_nombreJ)
                            .addComponent(jL_nivelJ))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jL_Secta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_datosJugadorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jP_datosJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_datosJugadorLayout.createSequentialGroup()
                                .addComponent(jL_tituoJ, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_datosJugadorLayout.createSequentialGroup()
                                .addComponent(jBDes)
                                .addGap(18, 18, 18)
                                .addComponent(jBEquipar)
                                .addGap(18, 18, 18)
                                .addComponent(jBComprar)
                                .addGap(0, 8, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jP_datosJugadorLayout.setVerticalGroup(
            jP_datosJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_datosJugadorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jP_datosJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jL_tituoJ, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(jP_datosJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jP_datosJugadorLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jL_nombreJ))
                    .addGroup(jP_datosJugadorLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jL_Secta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jL_nivelJ)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTesV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTesO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jP_datosJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBComprar)
                    .addComponent(jBEquipar)
                    .addComponent(jBDes))
                .addContainerGap())
        );

        jL_tituoJ.getAccessibleContext().setAccessibleName("jL_nombreMonstruo");

        jP_datosMonstruo.setBackground(new java.awt.Color(153, 51, 0));
        jP_datosMonstruo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jL_tituloM.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jL_tituloM.setText("MONSTRUO");
        jL_tituloM.setName("jL_nombreMonstruo"); // NOI18N

        jBCombatir.setLabel("Combatir");
        jBCombatir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCombatirActionPerformed(evt);
            }
        });

        jBSiguiente.setText("Siguiente Turno");
        jBSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSiguienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jP_datosMonstruoLayout = new javax.swing.GroupLayout(jP_datosMonstruo);
        jP_datosMonstruo.setLayout(jP_datosMonstruoLayout);
        jP_datosMonstruoLayout.setHorizontalGroup(
            jP_datosMonstruoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_datosMonstruoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jP_datosMonstruoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jP_datosMonstruoLayout.createSequentialGroup()
                        .addComponent(jBCombatir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBSiguiente))
                    .addGroup(jP_datosMonstruoLayout.createSequentialGroup()
                        .addComponent(jL_tituloM)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_datosMonstruoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jL_Monstruo, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jP_datosMonstruoLayout.setVerticalGroup(
            jP_datosMonstruoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_datosMonstruoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jL_tituloM, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jL_Monstruo, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jP_datosMonstruoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBCombatir)
                    .addComponent(jBSiguiente))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jP_datosJugador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jP_datosMonstruo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jP_datosMonstruo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jP_datosJugador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSiguienteActionPerformed

        int pasar=juego.siguienteTurno();
        System.out.println("Pasar = " + pasar);
        if(pasar == 0){
        actualizarJugador();
        actualizarMonstruo();
        jBDes.setEnabled(true);
        jBEquipar.setEnabled(true);
        jBCombatir.setEnabled(true);
        jBComprar.setEnabled(true);
        jBSiguiente.setEnabled(false);
        } else if(pasar == -1){
            mostrarMensaje("No puedes pasar de turno hasta no haber cumplido con el malrollo");
        } else{
            mostrarMensaje("Tienes demasiados tesoros ocultos, quedate como maximo con 4");
        }
        
        
    }//GEN-LAST:event_jBSiguienteActionPerformed

    private void mostrarMensaje(String mensaje) {
                JOptionPane.showMessageDialog(this, mensaje, "Advertencia",
                                JOptionPane.WARNING_MESSAGE);
        }
    
    private void jBDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDesActionPerformed
       juego.descartarTesoros(tesorosVisiblesSeleccionados, tesorosOcultosSeleccionados);       
       actualizarJugador();
    }//GEN-LAST:event_jBDesActionPerformed

    private void jBEquiparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEquiparActionPerformed
        juego.getJugadorActivo().equiparTesoros(tesorosOcultosSeleccionados); 
        actualizarJugador();
    }//GEN-LAST:event_jBEquiparActionPerformed

    private void jBCombatirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCombatirActionPerformed
        jBComprar.setEnabled(false); // Solo se puede comprar niveles antes de combatir
        
        
        int i = juego.desarrollarCombate();
        switch(i){
            case -2:
            jBDes.setEnabled(false);
            jBEquipar.setEnabled(false);
            jBCombatir.setEnabled(false);            
            jBSiguiente.setEnabled(true);            
            mostrarMensaje("Has muerto");
        break;
            case -1:            
                jBDes.setEnabled(true);
                jBEquipar.setEnabled(false);                
                jBCombatir.setEnabled(false);
                jBSiguiente.setEnabled(true);                
                mostrarMensaje("Has perdido sufre el mal rollo");                
                break;
            case 0:
                jBDes.setEnabled(true);
                jBEquipar.setEnabled(true);                
                jBCombatir.setEnabled(false);
                jBSiguiente.setEnabled(true);
                mostrarMensaje("Has escapado");     
                          
                break;
                
             case 1:
                jBDes.setEnabled(true);
                jBEquipar.setEnabled(true);                
                jBCombatir.setEnabled(false);
                jBSiguiente.setEnabled(true);
                mostrarMensaje("Has ganado el combate");
                break;
                 
             case 10:
                 jBDes.setEnabled(false);
                jBEquipar.setEnabled(false);
                jBCombatir.setEnabled(false);
                jBSiguiente.setEnabled(false);
                
                 mostrarMensaje("Has ganado, Fin del Juego");                
                break;    
            }
        actualizarJugador();
            
        
    }//GEN-LAST:event_jBCombatirActionPerformed

    private void jBComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBComprarActionPerformed
        LinkedList<Tesoro> temp = new LinkedList<Tesoro>();
        temp.addAll(tesorosVisiblesSeleccionados);
        temp.addAll(tesorosOcultosSeleccionados);
        juego.getJugadorActivo().comprarNivelesJugador(temp);
        mostrarMensaje("Has comprado " + juego.getJugadorActivo().calcularNivelesAComprar(temp) + " nivel");
        actualizarJugador();
    }//GEN-LAST:event_jBComprarActionPerformed

    private void zoomOnSecta(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomOnSecta
        if (jugadorActivo.soySectario()){ 
            jL_Secta.setSize(240, 400);
            jL_Secta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            ImageIcon f = new ImageIcon(getClass().getResource(((JugadorSectario)jugadorActivo).getCartaSectario().getDirImagen()));
            Icon icono = new ImageIcon(f.getImage().getScaledInstance(jL_Secta.getWidth(), jL_Secta.getHeight(), Image.SCALE_DEFAULT));
            jL_Secta.setIcon(icono);
            jL_Secta.repaint();
            pack();
        }
    }//GEN-LAST:event_zoomOnSecta

    private void zoomOffSecta(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomOffSecta
        if (jugadorActivo.soySectario()){ 
            jL_Secta.setSize(60, 100);
            jL_Secta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            ImageIcon f = new ImageIcon(getClass().getResource(((JugadorSectario)jugadorActivo).getCartaSectario().getDirImagen()));
            Icon icono = new ImageIcon(f.getImage().getScaledInstance(jL_Secta.getWidth(), jL_Secta.getHeight(), Image.SCALE_DEFAULT));
            jL_Secta.setIcon(icono);
            jL_Secta.repaint();
            pack();
        }
    }//GEN-LAST:event_zoomOffSecta

    /**
     * @param args the command line arguments
     */
   private void actualizarMonstruo () {
       monstruoEnJuego =  juego.monstruoEnJuego();    
       jL_Monstruo.setIcon(new javax.swing.ImageIcon(getClass().getResource(monstruoEnJuego.getDirImagen())));
  // jL_nombreMonstruo.setText (juego.getMonstruoEnJuego().getNombre());
   //jL_malRollo.setText (juego.getMonstruoEnJuego().getMalRollo());
    pack();

   }
   
   private void actualizarJugador() {
    TesoroGrafico unTesoroGrafico; // variable auxiliar para varios usos
    jugadorActivo = juego.getJugadorActivo(); // asociación con el modelo
    jL_nombreJ.setText("Nombre: "+jugadorActivo.getNombre());
    jL_nivelJ.setText("Nivel: "+jugadorActivo.obtenerNivel());
    
    
    
           
    // INCLUIR instrucciones para actualizar el nombre, el nivel, u otra
    // información del jugador activo distinta a los tesoros
    // Antes de añadir los tesoros visibles de este jugador a su JPanel
    // de tesoros visibles, se eliminan los tesoros que ya tenía este
    // JPanel que pertenen al jugador anterior.
    // Esos tesoros se encuentran en tesorosVisiblesAlimpiar
    // (atributo de tipo List<TesoroGrafico> de la clase
    // VentanaPrincipal
    
    jPanelTesV.removeAll();
    for (TesoroGrafico tg : tesorosVisiblesAlimpiar){
        jPanelTesV.remove (tg);
    }
    // Se vacía tesorosAlimpiar para incluirle los del jugador activo
    tesorosVisiblesAlimpiar.clear();
    // Ahora se añaden los tesoros visibles del jugador actual
    for (Tesoro t : jugadorActivo.getTesorosVisibles()) {
    unTesoroGrafico = new TesoroGraficoVisible(t);
    // El tesoro gráfico se añade a su JPanel
    jPanelTesV.add (unTesoroGrafico);
    // También se incluye en tesorosVisiblesAlimpiar para la
    // actualización del próximo jugador
    tesorosVisiblesAlimpiar.add(unTesoroGrafico);
    }
    // El jugador que acaba de recibir el turno no debe tener ningún tesoro
    // visible seleccionado
    tesorosVisiblesSeleccionados.clear();
    
    jPanelTesO.removeAll();
    for (TesoroGrafico tg : tesorosOcultosAlimpiar){
        jPanelTesO.remove (tg);
    }
    tesorosOcultosAlimpiar.clear();
    for (Tesoro t : jugadorActivo.getTesorosOcultos()) {
    unTesoroGrafico = new TesoroGraficoOculto(t);
    
    jPanelTesO.add (unTesoroGrafico);
   
    tesorosOcultosAlimpiar.add(unTesoroGrafico);
    }
    
    tesorosOcultosSeleccionados.clear();
    
    if (jugadorActivo.soySectario()){ //Soy sectario
            jL_Secta.setSize(60, 100);
            jL_Secta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            ImageIcon f = new ImageIcon(getClass().getResource(((JugadorSectario)jugadorActivo).getCartaSectario().getDirImagen()));
            Icon icono = new ImageIcon(f.getImage().getScaledInstance(jL_Secta.getWidth(), jL_Secta.getHeight(), Image.SCALE_DEFAULT));
            jL_Secta.setIcon(icono);
            jL_Secta.repaint();
    } else{
        jL_Secta.setIcon(null);
    }
        
    
    repaint();
    pack();
    }
    
    
    

    

 private class TesoroGrafico extends JPanel {
      
protected Tesoro tesoro;

private JLabel jL_nombre = new JLabel();



TesoroGrafico(Tesoro unTesoro) {
tesoro = unTesoro;

jL_nombre.setSize(60, 100); //tamaño para sin el cursor encima (pequeño)
jL_nombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

ImageIcon f = new ImageIcon(getClass().getResource(tesoro.getDirImagen()));
Icon icono = new ImageIcon(f.getImage().getScaledInstance(jL_nombre.getWidth(), jL_nombre.getHeight(), Image.SCALE_DEFAULT));
jL_nombre.setIcon(icono);

this.add(jL_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 10, 90, -1));
}

protected void dimensionarJLabel(int anchura, int altura){
    jL_nombre.setSize(anchura, altura);
    jL_nombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    ImageIcon f = new ImageIcon(getClass().getResource(tesoro.getDirImagen()));
    Icon icono = new ImageIcon(f.getImage().getScaledInstance(jL_nombre.getWidth(), jL_nombre.getHeight(), Image.SCALE_DEFAULT));
    jL_nombre.setIcon(icono);
    jL_nombre.repaint();
    
    pack();
}

}
  


//////////////////////////////////////////////////////////////////////  
  


private class TesoroGraficoVisible extends TesoroGrafico {
    private boolean pulsado;

TesoroGraficoVisible (Tesoro unTesoro) {
super(unTesoro);
pulsado = false;
// instrucciones que le dan un aspecto distinto a este tipo de tesoro
addMouseListener(new java.awt.event.MouseAdapter() {
@Override
public void mouseClicked(java.awt.event.MouseEvent evt) {
// instrucciones para procesar la selección de un tesoro visible
    if(!pulsado) {
                Border blackline = BorderFactory.createLineBorder(Color.red);
                TesoroGraficoVisible.this.setBorder(blackline);
                pulsado=true;
                tesorosVisiblesSeleccionados.add(TesoroGraficoVisible.this.tesoro);
    }
    else {
        pulsado=false;
        tesorosVisiblesSeleccionados.remove(TesoroGraficoVisible.this.tesoro);
        Border blackline = BorderFactory.createLineBorder(Color.LIGHT_GRAY);
        TesoroGraficoVisible.this.setBorder(blackline);
    }
}
    @Override
     public void mouseEntered(java.awt.event.MouseEvent evt) { //Aumenta el tamaño de los tesoros al poner el cursor encima
                dimensionarJLabel(240, 400);
            }    
    @Override
            public void mouseExited(java.awt.event.MouseEvent evt) { //Vuelve al tamaño normal al quitar el cursor de encima
                dimensionarJLabel(60, 100);
            }

});
}



//////////////////////////////////////////////////////////////////////


}

private class TesoroGraficoOculto extends TesoroGrafico {
    private boolean pulsado;

TesoroGraficoOculto (Tesoro unTesoro) {
super(unTesoro);
pulsado = false;
// instrucciones que le dan un aspecto distinto a este tipo de tesoro
addMouseListener(new java.awt.event.MouseAdapter() {
@Override
public void mouseClicked(java.awt.event.MouseEvent evt) {
// instrucciones para procesar la selección de un tesoro visible
    if(!pulsado) {
                Border blackline = BorderFactory.createLineBorder(Color.red);
                TesoroGraficoOculto.this.setBorder(blackline);
                pulsado=true;
                tesorosOcultosSeleccionados.add(TesoroGraficoOculto.this.tesoro);
                
    }
    else{
        pulsado=false;
        Border blackline = BorderFactory.createLineBorder(Color.LIGHT_GRAY);
        TesoroGraficoOculto.this.setBorder(blackline);                
        tesorosOcultosSeleccionados.remove(TesoroGraficoOculto.this.tesoro);

    }
}
@Override
     public void mouseEntered(java.awt.event.MouseEvent evt) { //Aumenta el tamaño de los tesoros al poner el cursor encima
                dimensionarJLabel(240, 400);
            }    
    @Override
            public void mouseExited(java.awt.event.MouseEvent evt) { //Vuelve al tamaño normal al quitar el cursor de encima
                dimensionarJLabel(60, 100);
            }
});
}
}

   @Override
    public int getDado(String s1, String s2)
    {
        return dado.getValor(s1, s2);
    }
    @Override
    public void mostrar(String args[]) {
        
    JD_nombresJugadores dialogoNombres;
    dado = new JD_dado (this,true);
    dialogoNombres = new JD_nombresJugadores (this,true);
    nombresJugadores = dialogoNombres.getNombres();
    jBSiguiente.setEnabled(false);
    // Añadir aquí el código para comunicarse con la clase Napakalaki
    // y comenzar el juego
    try
    {   
    juego.comenzarJuego(nombresJugadores);
    actualizarMonstruo();
    //jL_Monstruo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/modeloNapakalaki/Monstruos/Bichgooth.png"))); // NOI18N
    actualizarJugador(); 
    
    }
    catch(Exception ex)
    {
        System.out.println(ex);
    }
    this.setVisible(true);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCombatir;
    private javax.swing.JButton jBComprar;
    private javax.swing.JButton jBDes;
    private javax.swing.JButton jBEquipar;
    private javax.swing.JButton jBSiguiente;
    private javax.swing.JLabel jL_Monstruo;
    private javax.swing.JLabel jL_Secta;
    private javax.swing.JLabel jL_nivelJ;
    private javax.swing.JLabel jL_nombreJ;
    private javax.swing.JLabel jL_tituloM;
    private javax.swing.JLabel jL_tituoJ;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jP_datosJugador;
    private javax.swing.JPanel jP_datosMonstruo;
    private javax.swing.JPanel jPanelTesO;
    private javax.swing.JPanel jPanelTesV;
    // End of variables declaration//GEN-END:variables
}
